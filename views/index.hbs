<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Socket.IO chat</title>
  <style>
      body {
          margin: 0;
          padding-bottom: 3rem;
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      }

      #form-chat {
          background: rgba(0, 0, 0, 0.15);
          padding: 0.25rem;
          position: fixed;
          bottom: 0;
          left: 0;
          right: 0;
          display: flex;
          height: 3rem;
          box-sizing: border-box;
          backdrop-filter: blur(10px);
      }

      #input {
          border: none;
          padding: 0 1rem;
          flex-grow: 1;
          border-radius: 2rem;
          margin: 0.25rem;
      }

      #input:focus {
          outline: none;
      }

      #form-chat > button {
          background: #333;
          border: none;
          padding: 0 1rem;
          margin: 0.25rem;
          border-radius: 3px;
          outline: none;
          color: #fff;
      }

      #messages {
          list-style-type: none;
          margin: 0;
          padding: 0;
      }

      #messages > li {
          padding: 0.5rem 1rem;
      }

      #messages > li:nth-child(odd) {
          background: #efefef;
      }
  </style>
</head>
<body>
<div id="login">
  <form method="post" action="" id='form-login'>
    <input type="email" id="email" placeholder="email" required>
    <input type="password" id="password" placeholder="password" required>
    <button>Login</button>
  </form>
</div>
<div id="chat" style="display: none">
  <ul id="messages"></ul>
  <form id="form-chat" action="">
    <span id="typing"></span>
    <input id="input" autocomplete="off" />
    <button>Send</button>
  </form>
</div>
<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script src="https://unpkg.com/axios@1.1.2/dist/axios.min.js"></script>
<script>
  let state = 'login'
  let token = null
  let user = null
  const formLogin = document.getElementById('form-login');
  const email = document.getElementById('email');
  const password = document.getElementById('password');
  formLogin.addEventListener('submit', async (e) => {
    e.preventDefault()

    await axios.post('http://localhost:3000/auth/login', {email: email.value, password: password.value}).then((res) => {
      token = res.data.data.access_token
      state = 'chat'
      initChat()
    }).catch((err) => {
      alert(err.message)
    }).then(async () => {
      await axios.get('http://localhost:3000/auth/profile', {headers: {Authorization: `Bearer ${token}`}}).then((res) => {
        user = res.data.data
      })
    })

  })
</script>
<script>
  const divLogin = document.getElementById('login');
  const divChat = document.getElementById('chat');
  let socket = null
  const initChat = () => {
    const options = {
      path: '/global-chat/socket.io',
      transportOptions: {
        polling: {
          extraHeaders: {
            Authorization: `Bearer ${token}`
          }
        }
      }
    }
    socket = io('ws://localhost:3000', options);
    socket.emit('ping', "ping from client")
    socket.on('pong', (data) => {
      console.log(data)
    })
    socket.on('error', (data) => {
        console.log(data)
      })
    socket.on('chat', (data) => {
      const item = document.createElement('li');
      item.textContent = `(${new Date(data.timestamp).toLocaleString()} ${data.sender === user.email ? 'You': data.sender}) ${data.message}`;
      messages.appendChild(item);
      window.scrollTo(0, document.body.scrollHeight);
    })
    socket.on('notification', (data) => {
      console.log(data)
    })
    divLogin.style.display = 'none'
    divChat.style.display = 'block'

  }

  const formChat = document.getElementById('form-chat');
  const inputChat = document.getElementById('input');

  const messages = document.getElementById('messages');

  formChat.addEventListener('submit', (e) => {
    e.preventDefault()

    if(inputChat.value !== '') {
      socket.emit('chat', {
        message: inputChat.value
      })
      inputChat.value = ''
    }
  })

</script>
</body>
</html>